using System;
using System.Collections.Generic;
using Legacy.Core.Combat;
using Legacy.Core.Entities;
using Legacy.Core.PartyManagement;

namespace Legacy.Core.Abilities
{
	public class MonsterAbilityVulnerability : MonsterAbilityBase
	{
		private EDamageType m_damageType;

		public MonsterAbilityVulnerability(EMonsterAbilityType abilityType, EDamageType damageType) : base(abilityType)
		{
			m_damageType = damageType;
			m_executionPhase = EExecutionPhase.ON_CHARACTER_ATTACKS_MONSTER_BEFORE_DAMAGE_REDUCTION;
		}

		public override void HandleAttacks(List<Attack> p_attackList, Monster p_monster, Character p_character, Boolean p_isMagic)
		{
			if (p_attackList == null)
			{
				return;
			}
			foreach (Attack attack in p_attackList)
			{
				List<Damage> damages = attack.Damages;
				for (Int32 i = 0; i < damages.Count; i++)
				{
					if (damages[i].Type == m_damageType)
					{
						Damage value = damages[i];
						value.Value = (Int32)(value.Value * (1f + m_staticData.GetValues(m_level)[0] * 0.01f));
						damages[i] = value;
					}
				}
			}
		}
	}
}
